package protocol

/*
Struct holds the messages that will be sent around in the protocol. You have
to define each message twice: once the actual message, and a second time
with the `*onet.TreeNode` embedded. The latter is used in the handler-function
so that it can find out who sent the message.
*/

import (
	"golang.org/x/net/html"

	"gopkg.in/dedis/kyber.v2"
	"gopkg.in/dedis/onet.v2"
)

// Name can be used from other packages to refer to this protocol.
const Name = "Decenarch"
const SaveName = Name + "Save"

// ***************** Struct for DecenarchSave ****************************** //

// SavePhase is an indicator of the behaviour to have for a child of the
// root in the protocol.
type SavePhase int32

const (
	NilPhase SavePhase = iota
	Consensus
	RequestMissingData
	CoSigning
	SkipchainSaving
	End
)

// SaveAnnounce is used to pass a message to all children when the protocol
// called is DecenarchSave
//     Phase:			phase the protocol is currently
//     Url:			url of the webpage the conodes will reach consensus on
//     MasterTree:		tree representing structured data with its signatures
//     MasterHash:		hash representing unstructured data with its signatures
//     ParametersCBF:		parameters, i,e, m and k, of the counting Bloom filter
//				used by all the conodes
//     RandomEncryptedCBFs:	random counting Bloom filters generated by the root and
//				encrypted for each conode using a DH shared secret. Note
//				that the CBF of the root is not encrypted.
type SaveAnnounce struct {
	Phase           SavePhase
	Url             string
	MasterHash      map[string]map[kyber.Point][]byte
	ParametersCBF   []uint64
	NoiseForConodes map[string]*Noise
}

type Noise struct {
	EncryptedCBF []byte
	CBFSum       int
}

// StructSaveAnnounce just contains SaveAnnounce and the data necessary to
// identify and process the message in the sda framework.
type StructSaveAnnounce struct {
	*onet.TreeNode
	SaveAnnounce
}

// SaveReply return the protocol status, the consensus data and the errors of
// the conode that executed a save request.
//     Phase:		phase the protocol is currently
//     Url:		url of the webpage the conodes will reach consensus on
//     Errs:		errors that happends during the protocol
//     MasterTree:	tree representing structured data anonymised
//     MasterTreeSig:	signature of the root of the tree, creator of MasterTree
//     MasterHash:	hash representing unstructured data with its signatures
//
//     SeenMap:		the map of the Seen field of each service of each conode.
//			The keys are the public keys of the conode.
//     SigMap:		the map of the signature associatied with the Seen field of each
//			conodes. For a given public key (kyber.Point) both SigMap and
//			SeenMap must have an entry
//
//     RequestedNode:	the map linking the hash of an AnonNode's data with its
//			plaintext html data.
//     RequestedData:	the map linking the hash of an unstructured data with
//			its plaintext data.
//
//     CBFSet:		set of the counting Bloom filter of a given node merged
//			with the sets of the children's filters
//     CBFSetSig:	signature of CBFSet
type SaveReply struct {
	Phase      SavePhase
	Url        string
	Errs       []error
	MasterHash map[string]map[kyber.Point][]byte

	RequestedNode map[string]html.Node
	RequestedData map[string][]byte

	NoisyCBFSet    []byte
	ShuffledCBFSet []byte
	CBFSetSig      []byte
}

// StructSaveReply just contains StructSaveReply and the data necessary to
// identify and process the message in the sda framework.
type StructSaveReply struct {
	*onet.TreeNode
	SaveReply
}
